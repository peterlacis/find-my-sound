%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 16.0.0
%%For: (In-Finity) ()
%%Title: (amplifier4.EPS)
%%CreationDate: 9/13/2016 7:54 PM
%%Canvassize: 16383
%%BoundingBox: -270 -147 864 987
%%HiResBoundingBox: -270 -146.8574 863.8574 987
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%RGBProcessColor: 0 0 0 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 297.5 419.5 297.5 419.5
%AI3_TileBox: 10.5483 10.5117 586.5479 829.7515
%AI3_DocumentPreview: Header
%AI5_ArtSize: 1133.8574 1133.8574
%AI5_RulerUnits: 1
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -1804 1282 0.5 1789 1045 26 0 0 82 116 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 28.3465 20 28.3465 20 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 0
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 128 128 8
%%BeginData: 14895 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF
%FDE0FF7D7D2752275252A8A8FD74FFA87D2727F827F827F827F82752FD72
%FF5227F827F827F827F827F827F8F8F852A8FD6DFF7D2727F827F827F827
%F827F827F8272727F8277DFD6AFF7D52F8F8F827F8F8F82727522727F8F8
%F827F827F8F827A8A8FD5FFFFD047DFF7D522727F827F827F82752A8A8FD
%05FF7D522727F8272727F852527DA8FD047DFD57FFA8FD04F87D27F827F8
%27F8F8F852A8FD0AFFA852F8F827F827F8F8F8A8FD04F87DFD56FFA827F8
%2727A8FD0427F82727A8FD0EFFA852F8272727F827A827F827F8A8FD56FF
%A8F827F827A827F8F8F8277DFD12FF7D27FD04F8A8F827F8277DFD56FFA8
%27F82727A8272752A8FD16FF7D522752A827F827F8A8FD56FFA8F827F827
%A8FFA8FD1BFFA8A8F827F8277DFD48FFA87D525227272752272727522752
%FD0427F82727522752272727522727275227272752272727522727275227
%2727522752FD0427F8FD04275227272752272727527DFD3AFF5227F8F8F8
%27F8F8F827F8F8F827F827F827F827F827F8F8F827F8F8F827F8F8F827F8
%F8F827F8F8F827F8F8F827F8F8F827F8F8F827F827F827F8F8F827F8F8F8
%27FD05F87DFD37FF2727F827F8272727F8272727F8272727F8272727F827
%2727F8272727F8272727F8272727F8272727F8272727F8272727F8272727
%F8272727F8272727F8272727F8272727F8272727F852FD35FF52F8F827F8
%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F852FD33FF7D27F827F8272727F8272727F8272727
%F8272727F8272727F8272727F8272727F8272727F8272727F8272727F827
%2727F8272727F8272727F8272727F8272727F8272727F8272727F8272727
%F8A8FD32FF52F827F827F827F827F827F8F8F827F8F8F827F8F8F827F8F8
%F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827
%F8F8F827F8F8F827F8F8F827F8F8F827F827F827F8F827FD32FFFD0427F8
%FD0427522752275227522752275227522752275227522752275227522752
%275227522752275227522752275227522752275227522752275227522752
%27522727F827F8272727F827A8FD30FF7D27F827F827F82727FD3DFFA852
%F827F827F827F8A8FD30FFA8F827F8FD0427FFFFFFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFF52F827F827F8277D
%FD30FF7DF8F827F827F87DFFA8F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F8277DFF52F8F827F827F87DFD30FFA8F827F8
%2727277DFF52F8F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F852FFA8F827F82727277DFD30FF7D27F827F827F87DFF52F8
%27F827F827F827F827F827F827F827FD05F827F827F827F827F8F8F827F8
%27F827F827FD05F827F827F827F827F827F827F827F827F8F852FF7D27F8
%27F827F87DFD30FF7DF8272727F8277DFF52272727F8272727F8272727F8
%272727F8277D7D7D52F827F8FD04277D7D7D2727F827F827F82752A87D52
%F8272727F82752A8A8FFA8A87D27F827F87DFF7DF8272727F8277DFD30FF
%7DF8F827F827F87DFF52F827F827F827F827F827F827F827F852A8A8FFA8
%A852F827F82727FFA8FFA8FF52F8F827F827FD05A87DF827F827F8A8FFFD
%047DFF27F8F8F852FF7DF8F827F827F87DFD30FFA8F8272727F8277DFF52
%272727F82727A8A87D2727F827F827FF7DF8A82752FF52F82727FF5227A8
%5227FF5227F827A8A8F8A85227A87DF827F827A8A8F827F827FF52F827F8
%7DFFA8F8272727F8277DFD30FF7DF8F827F827F87DFF52F827F82727FD04
%FF7DF827F8F87DA8F8275227F87D7DF8F87DA8F8F85227F852A8F8F852FF
%F8F82752F852A827F827F8A87DF8F8F827FF2727F8F852FF7DF8F827F827
%F87DFD30FFA8F827F82727277DFF5227F827F87DFD04FFA827F827F8A852
%F8F827F82752FF27F87DA8F827F827F827A827F87D7D272727F82727FFFD
%04277DA8F8522727FF52F827F852FFA8F827F82727277DFD30FF7DF8F827
%F827F87DFF52F827F82727FD04FFA8F827F8F87D7DF827F827F852A827F8
%7D7DF8F827F8F827A8F8F852A8F827F827F827A827F827F8A87D52FFFF27
%FF27F8F8F852FF7DF8F827F827F87DFD30FFA8F827F82727277DFF5227F8
%2727277DFFFFFFFD0427F87DFF27F827F827A87DF82727FF27F8F827F8A8
%7D27F827FF52F827F8277DA8F82727277DA827FFA827FF52F827F87DFFA8
%F827F82727277DFD30FF7D27F827F827F87DFF52F827F827F827275227F8
%F827F827F8A8A8522752A8A8F827F8F87DFF522727A8A827F827F852FF7D
%27527DFF27F8F827F8A8A8FD0427FF52F8F8F852FF7D27F827F827F87DFD
%30FF7DF8272727F8277DFF52272727F827F827F8272727F8272727F87DA8
%FFA87DF827F827F82752FFFFFF7D27F827F827F852A8FFA8A8FD0427F827
%52FFA8FD04FF52F827F87DFF7DF8272727F8277DFD30FF7DF8F827F827F8
%7DFF52F827F827F827F827F827F827F827F827F8272727F827F827F827F8
%F8F827F8F8F827F827F827F827F827F8F8F827F827F8FD0727F827F8F852
%FF7DF8F827F827F87DFD30FFA8F8272727F8277DFF52272727F8272727F8
%272727F8272727F827F827F8272727F8272727F827F827F8272727F82727
%27F827F827F8272727F8272727F827F827F8272727F87DFFA8F8272727F8
%277DFD30FF7DF8F827F827F87DFF52FD3CF852FF7DF8F827F827F87DFD30
%FFA8F827F82727277DFF7D52527D5252527D5252527D5252527D5252527D
%5252527D5252527D5252527D5252527D5252527D5252527D5252527D5252
%527D5252527D5252527D52A8FFA8F827F82727277DFD30FF7DF8F827F827
%F87DFD40FF7DF8F827F827F87DFD30FFA8F827F82727277DFFA87D7DA87D
%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D
%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8FFA8F8
%27F82727277DFD30FF7D27F827F827F87DFF52FD0FF827F8F8F827F8F8F8
%27F8F8F827F8F8F827F8F8F827FD18F852FF7D27F827F827F87DFD30FF7D
%F8272727F8277DFF5227F827A87DF82752A8272727A82727F8A87D27F87D
%A827F827A852F8277D7DF82752A8272727A85227F87D7D27F852A852F827
%7D7DF82752A82727F87DFF7DF8272727F8277DFD30FF7DF8F827F827F87D
%FF52F827F8522727F8525227F8275227F8F85252F8F8277DF827F87D27F8
%F85252F8F8275227F8275227F8272752F8272752F827F8522727F8275227
%F8F852FF7DF8F827F827F87DFD30FFA8F8272727F8277DFF5227A852F827
%A8A8F8F852FF272727FF5227F87DA827F852A852F827A87DF8F87DFFF8F8
%27FF52F8F8A87DF8F87DA827F827A852F8277DA8F8F852A8F87DFFA8F827
%2727F8277DFD30FF7DF8F827F827F87DFF52F87D27F8F87D52F8F8527D27
%F8277D52F8F8527DF8F8277D27F8F87D52F8F8525227F8277D27F8F85252
%F8F8277DF8F8F87D27F8F87D52F8F8527DF852FF7DF8F827F827F87DFD30
%FFA8F827F82727277DFF5227F8277D52F82752A8F8F827A82727F87D5227
%F8527D27F8277D52F8F87D7DF8F827A827F8F8A852F8F87D7D27F852A827
%F8277D7DF82752A8F827F87DFFA8F827F82727277DFD30FF7DF8F827F827
%F87DFF52F8F8F8A852F8F87D7D27F827A852F8277D7DF8F852A8F8F8F8A8
%27F8F87D52F8F8527D27F8277D52F8F8527DF8F827A827F8F8A852F8F87D
%7D27F8F852FF7DF8F827F827F87DFD30FFA8F827F82727277DFF52275252
%F827527DF827277D2727F87D2727F87D5227F8527D27F8277D52F827527D
%F827277D2727F87D5227F8527D27F8277D52F827527DF827277DF87DFFA8
%F827F82727277DFD30FF7D27F827F827F87DFF52F8A852F8F8A87DF8F852
%A827F827A87DF8F87DA8F8F827FF27F8F8A852F8F87DA827F852A852F827
%A87DF8F852FFF8F827FF52F8F8A87D27F852A82752FF7D27F827F827F87D
%FD30FF7DF8272727F8277DFF522727275227F8272752F82727522727F852
%2727F8525227F8275227F8275252F8272752F827F8522727F85252272727
%522727275252F8272752F827F87DFF7DF8272727F8277DFD30FF7DF8F827
%F827F87DFF52F8F8F8FF52F8F87DA827F827FF52F8F8A8A8F8F852FFF8F8
%27FF52F8F8A87DF8F852A827F827FF7DF8F87DA8F8F827FF27F8F8FF7DF8
%F87DA827F8F852FF7DF8F827F827F87DFD30FFA8F8272727F8277DFF52FD
%0827522752F8522752FD1127522727F8522752FD1127522752F87DFFA8F8
%272727F8277DFD30FF7DF8F827F827F87DFF52F8FF52F8F8A87DF8F87DFF
%27F827FF7DF8F87DA8F8F827FF27F8F8FF52F8F87DA827F827FF52F8F8A8
%A8F8F852FF27F827FF52F8F8A8A8F8F852A8F852FF7DF8F827F827F87DFD
%30FFA8F827F82727277DFF522752FD042752F82727522727F8522727F852
%5227F8275227F8275227F8272752F82727522727F852FD04275227272752
%27F8272752F8272752F852FFA8F827F82727277DFD30FF7DF8F827F827F8
%7DFF52F8F8F8FF52F8F87DA827F852A852F827A87DF8F852A8F8F827FF27
%F8F8A87DF8F852A827F827A87DF8F87DA8F8F827FF27F8F8A87DF8F87DA8
%27F8F852FF7DF8F827F827F87DFD30FFA8F827F82727277DFF5227F8277D
%52F827527DF827277D2727F87D5227F8525227F8275252F8275252F82727
%7D2727F87D2727F87D5227F8527D27F8277D52F827527DF827F87DFFA8F8
%27F82727277DFD30FF7D27F827F827F87DFF52F8A827F8F87D7DF8F852A8
%27F8277D52F8F852A8F8F827A827F8F8A852F8F87D7D27F827A852F8277D
%7DF8F852A8F8F827A852F8F87D7D27F8527D2752FF7D27F827F827F87DFD
%30FF7DF8272727F8277DFF52277D52F8277D7DF8F852A827F827A852F8F8
%7D7D27F8527D27F8277D52F8F852A8F8F827A827F8F87D52F8F8527D27F8
%27A852F8277D7DF8F852A8F87DFF7DF8272727F8277DFD30FF7DF8F827F8
%27F87DFF52F827F87D27F8F8525227F8277D27F8F85252F8F8277DF8F8F8
%7D27F8F87D52F8F8527D27F8277D52F8F8527DF8F8277D27F8F87D52F8F8
%527D27F8F852FF7DF8F827F827F87DFD30FFA8F8272727F8277DFF5227F8
%27A87DF8F87DFFF8F827FF52F8F8A87DF8F87DA827F827A852F8277DA8F8
%F852FF272727A85227F87DA827F852A852F827A87DF8F852FF2727F87DFF
%A8F8272727F8277DFD30FF7DF8F827F827F87DFF52F8522727F85227F8F8
%275227F8275227F8272752F8272752F827F8522727F8275227F8275227F8
%F85252F8F8277DF827F8522727F8525227F82752F852FF7DF8F827F827F8
%7DFD30FFA8F827F82727277DFF5227A852F827A8A8F8F852FF27F827FF52
%F8F8A8A827F852FF52F827A87DF8F87DFFF8F827FF27F8F8A87D27F87DA8
%27F827FF7DF8F87DA8F8F852FFF852FFA8F827F82727277DFD30FF7DF8F8
%27F827F87DFF52F827F852F827F8FD0727F8272727F8272727F827F852F8
%27F8272727F8272727F8272727F8272727F827F852F827F8272727F8FD04
%27F852FF7DF8F827F827F87DFD30FFA8F827F82727277DFF5227F827FF7D
%F8277DFFF82727FF2727F8FF7D27F87DA827F827FF7DF827A8A8F8F852FF
%27F827FF7DF8F8A8A827F852FF52F827A87DF8277DFFF827F87DFFA8F827
%F82727277DFD30FF7D27F827F827F87DFF52F827F8522727F8272727F827
%2727F8272727F8272752F827F852F827F8FD0B27F8272752F827F852F827
%F8522727F8272727F8F852FF7D27F827F827F87DFD30FF7DF8272727F827
%7DFF5227A852F827A8A8F8F852FF272727FF52F8F8A8A827F852FF52F827
%A87DF8F87DFFF8F827FF52F8F8A87DF8F87DFF27F827FF7DF8277DA8F8F8
%52FFF87DFF7DF8272727F8277DFD30FF7DF8F827F827F87DFF52F87D27F8
%F85252F8F8275227F8275227F8272752F8272752F827F8522727F8275227
%F8275227F8F82752F8F82752F8F8F85227F8F85252F8F82752F852FF7DF8
%F827F827F87DFD30FFA8F8272727F8277DFF5227F827A87DF8F87DA8F8F8
%27FF27F8F8A87DF8F87DA827F827A852F8277DA8F8F852FF272727A85227
%F87DA827F852A852F827A87DF8F852A82727F87DFFA8F8272727F8277DFD
%30FF7DF8F827F827F87DFF52F827F87D52F8F8525227F8277D27F8F85252
%F8F8277DF8F8F87D27F8F87D52F8F8527D27F8277D52F8F8527DF8F8277D
%27F8F87D52F8F8527D27F8F852FF7DF8F827F827F87DFD30FFA8F827F827
%27277DFF52277D52F8277D7DF8F827A827F8F8A852F8F87D7D27F8527D27
%F8277D52F827527DF82727A82727F87D5227F8527D27F8277D52F8F8527D
%F8F8277DF852FFA8F827F82727277DFD30FF7DF8F827F827F87DFF52F8A8
%27F8F87D52F8F8527D27F8277D52F8F8527DF8F827A827F8F8A852F8F87D
%7D27F827A852F8F87D7DF8F852A8F8F8F8A827F8F87D7DF8F8527DF852FF
%7DF8F827F827F87DFD30FFA8F827F82727277DFF5227F8275252F827527D
%F827277D2727F87D5227F8525227F8275252F8275252F827277D2727F87D
%2727F8525227F8277D27F8275252F827277DF827F87DFFA8F827F8272727
%7DFD30FF7D27F827F827F87DFF52F8F8F8FF52F8F87DA8F8F852A852F827
%A87DF8F852A8F8F827FF52F8F8A87DF8F852A827F827A87DF8F87DA8F8F8
%27FF27F8F8A87DF8F87DA827F8F852FF7D27F827F827F87DFD30FF7DF827
%2727F8277DFF52275227F8272752F8272752F827F8522727F852FD042752
%FD082752F827F8522727F8522727F8275227F8275227F8272752F8272752
%F87DFF7DF8272727F8277DFD30FF7DF8F827F827F87DFF52F8A827F8F8A8
%7DF8F852A827F827A852F8F87DA8F8F827FF27F8F8A852F8F87DA827F827
%A852F8F8A8A8F8F852FFF8F8F8FF52F8F8A8A8F8F852A8F852FF7DF8F827
%F827F87DFD30FFA8F8272727F8277DFF52FD0A2752F8272752FD11275227
%27F85227272752FD112752F87DFFA8F8272727F8277DFD30FF7DF8F827F8
%27F87DFF52F827F8FF52F8F87DA827F852A852F8F8A87DF8F852FFF8F827
%FF52F8F8A87DF8F852FF27F827A87DF8F87DA8F8F827FF27F8F8A87DF8F8
%7DA827F8F852FF7DF8F827F827F87DFD30FFA8F827F82727277DFF5227F8
%275227F8272752F82727522727F8522727F8275227F8275227F8272752F8
%2727522727F8522727F8525227F8275227F8275252F8272752F827F852FF
%A8F827F82727277DFD30FF7DF8F827F827F87DFF52F8A827F8F8A87DF8F8
%52A827F827A852F8F87DA8F8F827FF27F8F8A852F8F87DA827F827A852F8
%F87D7DF8F852A8F8F8F8A852F8F87D7DF8F8527DF852FF7DF8F827F827F8
%7DFD30FFA8F827F82727277DFF52275252F827527DF827277D2727F87D27
%27F87D5227F8527D27F8277D52F827527DF827277D2727F87D5227F8527D
%27F8277D52F827527DF827277DF87DFFA8F827F82727277DFD30FF7D27F8
%27F827F87DFF52F8F8F8A852F8F87D7DF8F8277D27F8277D52F8F852A8F8
%F827A827F8F87D52F8F8527D27F8277D52F8F8527DF8F827A827F8F87D52
%F8F8527D27F8F852FF7D27F827F827F87DFD30FF7DF8272727F8277DFF52
%F8F8275252F827277DF827277D2727F87D5227F8525227F8275252F82752
%52F827277D2727277D2727F8525227F8275227F8275252F827277D2727F8
%7DFFA8F8272727F8277DFD30FF7DF8F827F827F87DFFA8F827F827F82727
%27F8272727F8272727F8272727F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F8272727F827F8277DFF7DF8F827F8
%27F87DFD30FFA8F8272727F82727FD40FF27F8272727F8277DFD30FFA827
%F827F827F82727A8FD3CFFA852F827F827F827F8A8FD31FF2727F8272727
%F827F8272752272727522727275227272752272727522727275227272752
%272727522727275227272752272727522727275227272752272727522727
%27522727F8272727F827F827A8FD31FF52F827F827F827F827F8F8F827F8
%F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F8
%27F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F827F827F8
%27F8F827FD32FFA827F8272727F8272727F8272727F8272727F8272727F8
%272727F8272727F8272727F8272727F8272727F8272727F8272727F82727
%27F8272727F8272727F8272727F8272727F8272727F827F8A8FD33FF52F8
%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827
%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827
%F827F827F827F827F827F827F87DFD35FF52F8F8272727F8272727F82727
%27F8272727F8272727F8272727F8272727F8272727F8272727F8272727F8
%272727F8272727F8272727F8272727F8272727F8272727F8272727F827F8
%52FD37FF7D27FD05F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827
%F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8F827F8F8
%F827F8F8F827F8F8F827F8F8F87DFD3AFFA8FD41527D7DFDFCFFFDFCFFFD
%FCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDC1FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Vectorized Object) (Image Tracing) (Vectorize.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (Swatch Libraries.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.912474 0.787625 0.619837 0.97467 ([Registration]) 0 Xs
([Registration])
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
0 O
0 0 0 0 1 1 1 Xa
0 J 0 j 1 w 10 M []0 d1 XR
-270 987 m
863.8574 987 l
863.8574 -146.8574 l
-270 -146.8574 l
-270 987 l
-270 987 l
f
*u
0.718257 0.622858 0.579553 0.726619 0.160784 0.160784 0.160784 Xa
24.7383 719.5215 m
117.7671 719.5215 l
117.7671 762.2485 l
117.7671 764.2515 118.5845 766.0698 119.9019 767.3853 c
121.2104 768.6919 123.021 769.5073 125.0239 769.5073 c
155.4136 769.5073 l
155.4136 719.5215 l
438.4434 719.5215 l
438.4434 769.5073 l
468.834 769.5073 l
470.8359 769.5073 472.6465 768.6919 473.957 767.3853 c
475.2734 766.0698 476.0898 764.2515 476.0938 762.2485 c
476.0938 719.5215 l
569.1191 719.5215 l
612.1621 719.5215 644.6211 687.0566 644.6211 644.02 c
644.6211 99.6387 l
644.6211 56.6016 612.1563 24.1367 569.1191 24.1367 c
24.7383 24.1367 l
-18.2983 24.1367 -50.7632 56.5957 -50.7632 99.6387 c
-50.7632 644.02 l
-50.7632 687.062 -18.3037 719.5215 24.7383 719.5215 c
24.7383 719.5215 l
f
164.8408 769.5083 m
186.7285 769.5083 202.8545 779.6509 219.8325 790.3315 c
274.2524 824.562 319.6055 824.562 374.0254 790.3315 c
391.0039 779.6509 407.1289 769.5083 429.0176 769.5083 c
429.0176 730.5522 l
403.3398 730.5522 385.5645 741.7329 366.8477 753.5063 c
317.082 784.8101 276.7764 784.8081 227.0107 753.5063 c
208.2935 741.7329 190.5171 730.5522 164.8408 730.5522 c
164.8408 769.5083 l
164.8408 769.5083 l
f
40.2192 642.3867 m
553.6387 642.3867 l
561.2539 642.3867 567.4863 636.1538 567.4863 628.5396 c
567.4863 504.1895 l
26.3721 504.1895 l
26.3721 628.5396 l
26.3721 636.1558 32.603 642.3867 40.2192 642.3867 c
40.2192 642.3867 l
f
95.2378 597.1045 m
108.3892 597.1045 119.0537 586.4399 119.0537 573.2886 c
119.0537 560.1367 108.3892 549.4722 95.2378 549.4722 c
82.0859 549.4722 71.4214 560.1367 71.4214 573.2886 c
71.4214 586.4399 82.0859 597.1045 95.2378 597.1045 c
95.2378 597.1045 l
f
195.6304 611.7256 m
216.8564 611.7256 234.0674 594.5146 234.0674 573.2886 c
234.0674 552.062 216.8564 534.8511 195.6304 534.8511 c
174.4038 534.8511 157.1929 552.062 157.1929 573.2886 c
157.1929 594.5146 174.4038 611.7256 195.6304 611.7256 c
195.6304 611.7256 l
f
294.1714 611.7256 m
315.3984 611.7256 332.6094 594.5146 332.6094 573.2886 c
332.6094 552.062 315.3984 534.8511 294.1714 534.8511 c
272.9448 534.8511 255.7339 552.062 255.7339 573.2886 c
255.7339 594.5146 272.9448 611.7256 294.1714 611.7256 c
294.1714 611.7256 l
f
392.7129 611.7256 m
413.9395 611.7256 431.1504 594.5146 431.1504 573.2886 c
431.1504 552.062 413.9395 534.8511 392.7129 534.8511 c
371.4863 534.8511 354.2754 552.062 354.2754 573.2886 c
354.2754 594.5146 371.4863 611.7256 392.7129 611.7256 c
392.7129 611.7256 l
f
1 D
524.5488 613.354 m
474.0215 613.354 l
470.9863 613.354 468.5098 610.8794 468.5098 607.8481 c
468.5098 538.7285 l
468.5098 535.6978 470.9863 533.2231 474.0215 533.2231 c
524.5488 533.2231 l
527.5859 533.2231 530.0625 535.6968 530.0625 538.7285 c
530.0625 607.8481 l
530.0625 610.8799 527.5859 613.354 524.5488 613.354 c
524.5488 613.354 l
f
0 D
396.8594 600.6709 m
410.1855 598.6685 420.4043 587.1704 420.4043 573.2886 c
420.4043 557.9961 408.0059 545.5972 392.7129 545.5972 c
377.4199 545.5972 365.0215 557.9961 365.0215 573.2886 c
365.0215 587.1704 375.2402 598.6685 388.5645 600.6709 c
388.5645 584.8457 l
388.5645 583.8184 389.4063 582.978 390.4336 582.978 c
394.9902 582.978 l
396.0195 582.978 396.8594 583.8184 396.8594 584.8457 c
396.8594 600.6709 l
396.8594 600.6709 l
f
298.3184 600.6709 m
311.6445 598.6685 321.8613 587.1704 321.8613 573.2886 c
321.8613 557.9961 309.4629 545.5972 294.1714 545.5972 c
278.8789 545.5972 266.4805 557.9961 266.4805 573.2886 c
266.4805 587.1704 276.6992 598.6685 290.0244 600.6709 c
290.0244 584.8457 l
290.0244 583.8184 290.8652 582.978 291.8931 582.978 c
296.4497 582.978 l
297.478 582.978 298.3184 583.8184 298.3184 584.8457 c
298.3184 600.6709 l
298.3184 600.6709 l
f
199.7773 600.6709 m
213.1025 598.6685 223.3208 587.1704 223.3208 573.2886 c
223.3208 557.9961 210.9224 545.5972 195.6304 545.5972 c
180.3379 545.5972 167.939 557.9961 167.939 573.2886 c
167.939 587.1704 178.1577 598.6685 191.4829 600.6709 c
191.4829 584.8457 l
191.4829 583.8184 192.3237 582.978 193.3521 582.978 c
197.9082 582.978 l
198.936 582.978 199.7773 583.8184 199.7773 584.8457 c
199.7773 600.6709 l
199.7773 600.6709 l
f
1 D
514.5469 601.6294 m
484.0254 601.6294 l
482.1973 601.6294 480.6973 600.1338 480.6973 598.3032 c
480.6973 548.2739 l
480.6973 546.4429 482.1973 544.9468 484.0254 544.9468 c
514.5469 544.9468 l
516.373 544.9468 517.875 546.4429 517.875 548.2739 c
517.875 598.3032 l
517.875 600.1338 516.373 601.6294 514.5469 601.6294 c
514.5469 601.6294 l
f
488.8789 573.2886 m
488.8789 555.0576 l
488.8789 554.0322 489.7188 553.1953 490.7422 553.1953 c
507.8281 553.1953 l
508.8516 553.1953 509.6934 554.0322 509.6934 555.0576 c
509.6934 573.2886 l
488.8789 573.2886 l
488.8789 573.2886 l
f
0 D
567.4863 484.8872 m
567.4863 115.1191 l
567.4863 107.5293 561.2285 101.2734 553.6387 101.2734 c
40.2192 101.2734 l
32.6294 101.2734 26.3721 107.5039 26.3721 115.1191 c
26.3721 484.8872 l
567.4863 484.8872 l
567.4863 484.8872 l
f
1 D
553.6992 452.7163 m
548.707 457.7065 l
539.0234 448.0229 l
548.709 438.3384 l
553.6992 443.3281 l
553.6992 452.7163 l
553.6992 452.7163 l
f
553.6992 413.9805 m
548.709 418.9688 l
539.0254 409.2852 l
548.709 399.6035 l
553.6992 404.5938 l
553.6992 413.9805 l
553.6992 413.9805 l
f
553.6992 375.248 m
548.709 380.2363 l
539.0254 370.5508 l
548.709 360.8691 l
553.6992 365.8574 l
553.6992 375.248 l
553.6992 375.248 l
f
553.6992 336.5117 m
548.7109 341.5 l
539.0254 331.8145 l
548.709 322.1328 l
553.6992 327.1211 l
553.6992 336.5117 l
553.6992 336.5117 l
f
553.6992 297.7734 m
548.709 302.7637 l
539.0254 293.0801 l
548.709 283.3984 l
553.6992 288.3867 l
553.6992 297.7734 l
553.6992 297.7734 l
f
553.6992 259.041 m
548.709 264.0293 l
539.0254 254.3457 l
548.7109 244.6621 l
553.6992 249.6484 l
553.6992 259.041 l
553.6992 259.041 l
f
553.6992 220.3027 m
548.709 225.293 l
539.0254 215.6094 l
548.709 205.9258 l
553.6992 210.9141 l
553.6992 220.3027 l
553.6992 220.3027 l
f
553.6992 181.5684 m
548.709 186.5566 l
539.0254 176.875 l
548.709 167.1914 l
553.6992 172.1797 l
553.6992 181.5684 l
553.6992 181.5684 l
f
553.6992 142.834 m
548.709 147.8223 l
539.0234 138.1387 l
548.707 128.4551 l
553.6992 133.4453 l
553.6992 142.834 l
553.6992 142.834 l
f
535.3145 115.0605 m
539.0234 118.7715 l
529.3398 128.4551 l
519.6602 118.7734 l
523.373 115.0605 l
535.3145 115.0605 l
535.3145 115.0605 l
f
496.5781 115.0605 m
500.2891 118.7715 l
490.6055 128.4551 l
480.9219 118.7715 l
484.6348 115.0605 l
496.5781 115.0605 l
496.5781 115.0605 l
f
457.8438 115.0605 m
461.5547 118.7715 l
451.8711 128.4551 l
442.1875 118.7715 l
445.8984 115.0605 l
457.8438 115.0605 l
457.8438 115.0605 l
f
419.1094 115.0605 m
422.8184 118.7695 l
413.1328 128.4531 l
403.4531 118.7715 l
407.1641 115.0605 l
419.1094 115.0605 l
419.1094 115.0605 l
f
380.3711 115.0605 m
384.084 118.7734 l
374.4004 128.4551 l
364.7168 118.7715 l
368.4277 115.0605 l
380.3711 115.0605 l
380.3711 115.0605 l
f
341.6367 115.0605 m
345.3477 118.7715 l
335.6641 128.4551 l
325.9824 118.7715 l
329.6934 115.0605 l
341.6367 115.0605 l
341.6367 115.0605 l
f
302.9004 115.0605 m
306.6133 118.7715 l
296.9287 128.4551 l
287.2451 118.7715 l
290.9575 115.0605 l
302.9004 115.0605 l
302.9004 115.0605 l
f
264.165 115.0605 m
267.8755 118.7715 l
258.1929 128.4551 l
248.5093 118.7715 l
252.2202 115.0605 l
264.165 115.0605 l
264.165 115.0605 l
f
225.4302 115.0605 m
229.1411 118.7715 l
219.457 128.4551 l
209.7739 118.7734 l
213.4863 115.0605 l
225.4302 115.0605 l
225.4302 115.0605 l
f
186.6934 115.0605 m
190.4053 118.7715 l
180.7241 128.4531 l
171.0396 118.7695 l
174.7485 115.0605 l
186.6934 115.0605 l
186.6934 115.0605 l
f
147.9585 115.0605 m
151.6704 118.7715 l
141.9873 128.4551 l
132.3032 118.7715 l
136.0137 115.0605 l
147.9585 115.0605 l
147.9585 115.0605 l
f
109.2231 115.0605 m
112.9355 118.7715 l
103.2524 128.4551 l
93.5688 118.7715 l
97.2803 115.0605 l
109.2231 115.0605 l
109.2231 115.0605 l
f
70.4854 115.0605 m
74.1973 118.7734 l
64.5171 128.4551 l
54.834 118.7715 l
58.5439 115.0605 l
70.4854 115.0605 l
70.4854 115.0605 l
f
40.1592 133.4453 m
45.1504 128.4551 l
54.8335 138.1387 l
45.1494 147.8223 l
40.1592 142.834 l
40.1592 133.4453 l
40.1592 133.4453 l
f
40.1592 172.1797 m
45.1494 167.1914 l
54.832 176.875 l
45.1494 186.5566 l
40.1592 181.5684 l
40.1592 172.1797 l
40.1592 172.1797 l
f
40.1592 210.9141 m
45.1484 205.9258 l
54.832 215.6094 l
45.1494 225.293 l
40.1592 220.3027 l
40.1592 210.9141 l
40.1592 210.9141 l
f
40.1592 249.6484 m
45.147 244.6621 l
54.8315 254.3457 l
45.1484 264.0293 l
40.1592 259.041 l
40.1592 249.6484 l
40.1592 249.6484 l
f
40.1592 288.3867 m
45.1494 283.3984 l
54.832 293.0801 l
45.1494 302.7637 l
40.1592 297.7734 l
40.1592 288.3867 l
40.1592 288.3867 l
f
40.1592 327.1211 m
45.1484 322.1328 l
54.8315 331.8145 l
45.147 341.5 l
40.1592 336.5117 l
40.1592 327.1211 l
40.1592 327.1211 l
f
40.1592 365.8574 m
45.1494 360.8691 l
54.832 370.5508 l
45.1484 380.2363 l
40.1592 375.248 l
40.1592 365.8574 l
40.1592 365.8574 l
f
40.1592 404.5938 m
45.1494 399.6035 l
54.832 409.2852 l
45.1494 418.9688 l
40.1592 413.9805 l
40.1592 404.5938 l
40.1592 404.5938 l
f
40.1592 443.3281 m
45.1494 438.3384 l
54.8335 448.0229 l
45.1504 457.7065 l
40.1592 452.7163 l
40.1592 443.3281 l
40.1592 443.3281 l
f
58.5439 471.1001 m
54.834 467.3901 l
64.5171 457.7065 l
74.1973 467.3882 l
70.4858 471.1001 l
58.5439 471.1001 l
58.5439 471.1001 l
f
97.2798 471.1001 m
93.5688 467.3896 l
103.2524 457.7065 l
112.9355 467.3887 l
109.2246 471.1001 l
97.2798 471.1001 l
97.2798 471.1001 l
f
136.0132 471.1001 m
132.3032 467.3901 l
141.9873 457.7065 l
151.6704 467.3887 l
147.959 471.1001 l
136.0132 471.1001 l
136.0132 471.1001 l
f
174.748 471.1001 m
171.0396 467.3916 l
180.7241 457.7075 l
190.4053 467.3887 l
186.6938 471.1001 l
174.748 471.1001 l
174.748 471.1001 l
f
213.4858 471.1001 m
209.7739 467.3882 l
219.457 457.7056 l
229.1411 467.3896 l
225.4307 471.1001 l
213.4858 471.1001 l
213.4858 471.1001 l
f
252.2192 471.1001 m
248.5093 467.3901 l
258.1929 457.7065 l
267.8755 467.3901 l
264.1655 471.1001 l
252.2192 471.1001 l
252.2192 471.1001 l
f
290.9565 471.1001 m
287.2451 467.3887 l
296.9287 457.7056 l
306.6133 467.3887 l
302.9004 471.1001 l
290.9565 471.1001 l
290.9565 471.1001 l
f
329.6914 471.1001 m
325.9824 467.3901 l
335.6641 457.7065 l
345.3477 467.3901 l
341.6387 471.1001 l
329.6914 471.1001 l
329.6914 471.1001 l
f
368.4277 471.1001 m
364.7168 467.3896 l
374.4004 457.7056 l
384.084 467.3882 l
380.3711 471.1001 l
368.4277 471.1001 l
368.4277 471.1001 l
f
407.1641 471.1001 m
403.4531 467.3887 l
413.1328 457.7075 l
422.8184 467.3916 l
419.1094 471.1001 l
407.1641 471.1001 l
407.1641 471.1001 l
f
445.8984 471.1001 m
442.1875 467.3887 l
451.8711 457.7065 l
461.5547 467.3901 l
457.8438 471.1001 l
445.8984 471.1001 l
445.8984 471.1001 l
f
484.6328 471.1001 m
480.9219 467.3887 l
490.6055 457.7065 l
500.2891 467.3896 l
496.5781 471.1001 l
484.6328 471.1001 l
484.6328 471.1001 l
f
523.3711 471.1001 m
519.6602 467.3882 l
529.3398 457.7065 l
539.0234 467.3901 l
535.3145 471.1001 l
523.3711 471.1001 l
523.3711 471.1001 l
f
509.9746 128.457 m
519.6563 138.1387 l
509.9727 147.8203 l
500.291 138.1406 l
509.9746 128.457 l
509.9746 128.457 l
f
529.3398 147.8223 m
539.0234 157.5078 l
529.3418 167.1895 l
519.6563 157.5059 l
529.3398 147.8223 l
529.3398 147.8223 l
f
471.2383 128.4551 m
480.9219 138.1387 l
471.2363 147.8223 l
461.5547 138.1387 l
471.2383 128.4551 l
471.2383 128.4551 l
f
490.6074 147.8242 m
500.2891 157.5039 l
490.6055 167.1895 l
480.9238 157.5078 l
490.6074 147.8242 l
490.6074 147.8242 l
f
509.9727 167.1895 m
519.6582 176.873 l
509.9746 186.5566 l
500.2891 176.873 l
509.9727 167.1895 l
509.9727 167.1895 l
f
529.3438 186.5586 m
539.0254 196.2402 l
529.3418 205.9258 l
519.6582 196.2422 l
529.3438 186.5586 l
529.3438 186.5586 l
f
432.5039 128.4551 m
442.1875 138.1387 l
432.502 147.8223 l
422.8184 138.1387 l
432.5039 128.4551 l
432.5039 128.4551 l
f
451.8711 147.8223 m
461.5527 157.5059 l
451.8711 167.1895 l
442.1875 157.5078 l
451.8711 147.8223 l
451.8711 147.8223 l
f
471.2402 167.1914 m
480.9199 176.873 l
471.2363 186.5566 l
461.5566 176.875 l
471.2402 167.1914 l
471.2402 167.1914 l
f
490.6055 186.5566 m
500.2891 196.2402 l
490.6055 205.9258 l
480.9199 196.2402 l
490.6055 186.5566 l
490.6055 186.5566 l
f
509.9746 205.9258 m
519.6582 215.6074 l
509.9727 225.293 l
500.2891 215.6094 l
509.9746 205.9258 l
509.9746 205.9258 l
f
529.3418 225.293 m
539.0254 234.9766 l
529.3418 244.6602 l
519.6582 234.9766 l
529.3418 225.293 l
529.3418 225.293 l
f
393.7676 128.457 m
403.4492 138.1387 l
393.7656 147.8203 l
384.084 138.1406 l
393.7676 128.457 l
393.7676 128.457 l
f
413.1348 147.8242 m
422.8184 157.5078 l
413.1348 167.1895 l
403.4531 157.5078 l
413.1348 147.8242 l
413.1348 147.8242 l
f
432.502 167.1914 m
442.1855 176.875 l
432.502 186.5566 l
422.8184 176.875 l
432.502 167.1914 l
432.502 167.1914 l
f
451.8711 186.5605 m
461.5527 196.2422 l
451.8691 205.9258 l
442.1875 196.2441 l
451.8711 186.5605 l
451.8711 186.5605 l
f
471.2363 205.9258 m
480.9199 215.6094 l
471.2383 225.293 l
461.5527 215.6074 l
471.2363 205.9258 l
471.2363 205.9258 l
f
490.6055 225.2949 m
500.2891 234.9785 l
490.6055 244.6602 l
480.9219 234.9785 l
490.6055 225.2949 l
490.6055 225.2949 l
f
509.9727 244.6621 m
519.6563 254.3457 l
509.9746 264.0273 l
500.2891 254.3438 l
509.9727 244.6621 l
509.9727 244.6621 l
f
529.3418 264.0313 m
539.0254 273.7148 l
529.3418 283.3965 l
519.6582 273.7129 l
529.3418 264.0313 l
529.3418 264.0313 l
f
355.0332 128.4551 m
364.7168 138.1387 l
355.0332 147.8242 l
345.3496 138.1387 l
355.0332 128.4551 l
355.0332 128.4551 l
f
374.4023 147.8242 m
384.082 157.5039 l
374.3984 167.1875 l
364.7188 157.5078 l
374.4023 147.8242 l
374.4023 147.8242 l
f
393.7695 167.1895 m
403.4512 176.873 l
393.7676 186.5566 l
384.084 176.873 l
393.7695 167.1895 l
393.7695 167.1895 l
f
413.1367 186.5586 m
422.8184 196.2402 l
413.1367 205.9258 l
403.4531 196.2422 l
413.1367 186.5586 l
413.1367 186.5586 l
f
432.5059 205.9277 m
442.1855 215.6074 l
432.502 225.291 l
422.8223 215.6094 l
432.5059 205.9277 l
432.5059 205.9277 l
f
451.8711 225.293 m
461.5547 234.9766 l
451.8711 244.6602 l
442.1855 234.9766 l
451.8711 225.293 l
451.8711 225.293 l
f
471.2383 244.6621 m
480.9219 254.3438 l
471.2383 264.0273 l
461.5547 254.3438 l
471.2383 244.6621 l
471.2383 244.6621 l
f
490.6055 264.0273 m
500.2891 273.7129 l
490.6055 283.3945 l
480.9219 273.7129 l
490.6055 264.0273 l
490.6055 264.0273 l
f
509.9746 283.3965 m
519.6582 293.0801 l
509.9746 302.7637 l
500.291 293.0801 l
509.9746 283.3965 l
509.9746 283.3965 l
f
529.3418 302.7637 m
539.0254 312.4453 l
529.3418 322.1309 l
519.6582 312.4473 l
529.3418 302.7637 l
529.3418 302.7637 l
f
316.2969 128.4551 m
325.9805 138.1387 l
316.2969 147.8223 l
306.6133 138.1387 l
316.2969 128.4551 l
316.2969 128.4551 l
f
335.6641 147.8242 m
345.3496 157.5078 l
335.666 167.1914 l
325.9805 157.5078 l
335.6641 147.8242 l
335.6641 147.8242 l
f
355.0332 167.1914 m
364.7148 176.873 l
355.0293 186.5566 l
345.3496 176.875 l
355.0332 167.1914 l
355.0332 167.1914 l
f
374.3984 186.5586 m
384.082 196.2422 l
374.3984 205.9258 l
364.7168 196.2422 l
374.3984 186.5586 l
374.3984 186.5586 l
f
393.7676 205.9258 m
403.4512 215.6094 l
393.7656 225.293 l
384.084 215.6094 l
393.7676 205.9258 l
393.7676 205.9258 l
f
413.1367 225.2949 m
422.8184 234.9766 l
413.1328 244.6602 l
403.4531 234.9785 l
413.1367 225.2949 l
413.1367 225.2949 l
f
432.502 244.6602 m
442.1855 254.3438 l
432.502 264.0273 l
422.8184 254.3438 l
432.502 244.6602 l
432.502 244.6602 l
f
451.8711 264.0293 m
461.5527 273.7129 l
451.8711 283.3965 l
442.1875 273.7129 l
451.8711 264.0293 l
451.8711 264.0293 l
f
471.2363 283.3965 m
480.9199 293.0801 l
471.2363 302.7637 l
461.5527 293.0801 l
471.2363 283.3965 l
471.2363 283.3965 l
f
490.6055 302.7656 m
500.2891 312.4492 l
490.6055 322.1328 l
480.9219 312.4492 l
490.6055 302.7656 l
490.6055 302.7656 l
f
509.9746 322.1328 m
519.6563 331.8145 l
509.9727 341.5 l
500.2891 331.8164 l
509.9746 322.1328 l
509.9746 322.1328 l
f
529.3418 341.5 m
539.0254 351.1855 l
529.3418 360.8691 l
519.6582 351.1836 l
529.3418 341.5 l
529.3418 341.5 l
f
277.561 128.4551 m
287.2446 138.1387 l
277.5615 147.8223 l
267.8774 138.1387 l
277.561 128.4551 l
277.561 128.4551 l
f
296.9287 147.8242 m
306.6113 157.5078 l
296.9287 167.1895 l
287.2461 157.5078 l
296.9287 147.8242 l
296.9287 147.8242 l
f
316.2969 167.1914 m
325.9805 176.875 l
316.2988 186.5586 l
306.6133 176.873 l
316.2969 167.1914 l
316.2969 167.1914 l
f
335.6641 186.5605 m
345.3457 196.2402 l
335.6641 205.9258 l
325.9824 196.2422 l
335.6641 186.5605 l
335.6641 186.5605 l
f
355.0313 205.9277 m
364.7148 215.6094 l
355.0313 225.293 l
345.3496 215.6094 l
355.0313 205.9277 l
355.0313 205.9277 l
f
374.3984 225.2949 m
384.082 234.9766 l
374.3984 244.6602 l
364.7168 234.9766 l
374.3984 225.2949 l
374.3984 225.2949 l
f
393.7695 244.6621 m
403.4492 254.3438 l
393.7656 264.0273 l
384.084 254.3457 l
393.7695 244.6621 l
393.7695 244.6621 l
f
413.1328 264.0273 m
422.8184 273.7129 l
413.1367 283.3965 l
403.4512 273.7109 l
413.1328 264.0273 l
413.1328 264.0273 l
f
432.502 283.3984 m
442.1855 293.0801 l
432.502 302.7637 l
422.8203 293.0801 l
432.502 283.3984 l
432.502 283.3984 l
f
451.8711 302.7637 m
461.5527 312.4492 l
451.8711 322.1328 l
442.1875 312.4473 l
451.8711 302.7637 l
451.8711 302.7637 l
f
471.2383 322.1328 m
480.9219 331.8184 l
471.2383 341.5 l
461.5547 331.8164 l
471.2383 322.1328 l
471.2383 322.1328 l
f
490.6055 341.5 m
500.2891 351.1836 l
490.6055 360.8652 l
480.9219 351.1836 l
490.6055 341.5 l
490.6055 341.5 l
f
509.9727 360.8691 m
519.6582 370.5527 l
509.9746 380.2344 l
500.2891 370.5508 l
509.9727 360.8691 l
509.9727 360.8691 l
f
529.3418 380.2363 m
539.0254 389.9199 l
529.3438 399.6035 l
519.6582 389.918 l
529.3418 380.2363 l
529.3418 380.2363 l
f
238.8247 128.4551 m
248.5088 138.1387 l
238.8237 147.8242 l
229.1406 138.1387 l
238.8247 128.4551 l
238.8247 128.4551 l
f
258.1929 147.8242 m
267.8765 157.5078 l
258.1919 167.1914 l
248.5088 157.5078 l
258.1929 147.8242 l
258.1929 147.8242 l
f
277.5615 167.1914 m
287.2446 176.873 l
277.5596 186.5586 l
267.8765 176.875 l
277.5615 167.1914 l
277.5615 167.1914 l
f
296.9287 186.5586 m
306.6133 196.2441 l
296.9287 205.9277 l
287.2446 196.2441 l
296.9287 186.5586 l
296.9287 186.5586 l
f
316.2969 205.9277 m
325.9785 215.6074 l
316.2949 225.293 l
306.6133 215.6113 l
316.2969 205.9277 l
316.2969 205.9277 l
f
335.6641 225.2949 m
345.3477 234.9766 l
335.6621 244.6621 l
325.9805 234.9785 l
335.6641 225.2949 l
335.6641 225.2949 l
f
355.0313 244.6621 m
364.7148 254.3438 l
355.0293 264.0293 l
345.3477 254.3457 l
355.0313 244.6621 l
355.0313 244.6621 l
f
374.4004 264.0313 m
384.082 273.7129 l
374.3965 283.3965 l
364.7168 273.7148 l
374.4004 264.0313 l
374.4004 264.0313 l
f
393.7656 283.3965 m
403.4512 293.0801 l
393.7656 302.7637 l
384.082 293.0801 l
393.7656 283.3965 l
393.7656 283.3965 l
f
413.1367 302.7637 m
422.8184 312.4473 l
413.1328 322.1328 l
403.4512 312.4492 l
413.1367 302.7637 l
413.1367 302.7637 l
f
432.502 322.1328 m
442.1855 331.8164 l
432.502 341.5 l
422.8184 331.8184 l
432.502 322.1328 l
432.502 322.1328 l
f
451.8711 341.5 m
461.5547 351.1855 l
451.8711 360.8691 l
442.1855 351.1855 l
451.8711 341.5 l
451.8711 341.5 l
f
471.2383 360.8691 m
480.9199 370.5508 l
471.2363 380.2363 l
461.5527 370.5527 l
471.2383 360.8691 l
471.2383 360.8691 l
f
490.6055 380.2363 m
500.2891 389.9199 l
490.6055 399.6055 l
480.9199 389.9199 l
490.6055 380.2363 l
490.6055 380.2363 l
f
509.9746 399.6035 m
519.6582 409.2871 l
509.9727 418.9727 l
500.2891 409.2871 l
509.9746 399.6035 l
509.9746 399.6035 l
f
529.3418 418.9707 m
539.0234 428.6538 l
529.3398 438.3384 l
519.6563 428.6553 l
529.3418 418.9707 l
529.3418 418.9707 l
f
200.0898 128.457 m
209.7729 138.1406 l
200.0918 147.8203 l
190.4092 138.1387 l
200.0898 128.457 l
200.0898 128.457 l
f
219.4561 147.8242 m
229.1392 157.5078 l
219.4585 167.1875 l
209.7754 157.5039 l
219.4561 147.8242 l
219.4561 147.8242 l
f
238.8247 167.1914 m
248.5088 176.875 l
238.8271 186.5566 l
229.1436 176.873 l
238.8247 167.1914 l
238.8247 167.1914 l
f
258.1929 186.5605 m
267.8755 196.2422 l
258.1943 205.9258 l
248.5112 196.2402 l
258.1929 186.5605 l
258.1929 186.5605 l
f
277.5605 205.9277 m
287.2446 215.6113 l
277.5635 225.293 l
267.8789 215.6074 l
277.5605 205.9277 l
277.5605 205.9277 l
f
296.9287 225.2969 m
306.6094 234.9766 l
296.9287 244.6582 l
287.248 234.9766 l
296.9287 225.2969 l
296.9287 225.2969 l
f
316.2969 244.6621 m
325.9785 254.3457 l
316.2969 264.0273 l
306.6152 254.3438 l
316.2969 244.6621 l
316.2969 244.6621 l
f
335.6641 264.0313 m
345.3457 273.7129 l
335.666 283.3945 l
325.9824 273.7129 l
335.6641 264.0313 l
335.6641 264.0313 l
f
355.0332 283.3984 m
364.7129 293.0801 l
355.0332 302.7617 l
345.3516 293.0801 l
355.0332 283.3984 l
355.0332 283.3984 l
f
374.3965 302.7637 m
384.082 312.4492 l
374.4004 322.1309 l
364.7168 312.4453 l
374.3965 302.7637 l
374.3965 302.7637 l
f
393.7656 322.1328 m
403.4492 331.8164 l
393.7695 341.498 l
384.084 331.8145 l
393.7656 322.1328 l
393.7656 322.1328 l
f
413.1328 341.5 m
422.8184 351.1855 l
413.1367 360.8652 l
403.4531 351.1816 l
413.1328 341.5 l
413.1328 341.5 l
f
432.502 360.8691 m
442.1855 370.5527 l
432.5059 380.2344 l
422.8223 370.5508 l
432.502 360.8691 l
432.502 360.8691 l
f
451.8691 380.2363 m
461.5527 389.9199 l
451.8711 399.5996 l
442.1875 389.918 l
451.8691 380.2363 l
451.8691 380.2363 l
f
471.2363 399.6035 m
480.9199 409.2891 l
471.2402 418.9688 l
461.5566 409.2852 l
471.2363 399.6035 l
471.2363 399.6035 l
f
490.6055 418.9727 m
500.2891 428.6567 l
490.6074 438.3374 l
480.9238 428.6528 l
490.6055 418.9727 l
490.6055 418.9727 l
f
509.9727 438.3398 m
519.6563 448.0225 l
509.9746 457.7036 l
500.291 448.021 l
509.9727 438.3398 l
509.9727 438.3398 l
f
161.3535 128.4551 m
171.0386 138.1387 l
161.3555 147.8223 l
151.6704 138.1387 l
161.3535 128.4551 l
161.3535 128.4551 l
f
180.7227 147.8242 m
190.4053 157.5078 l
180.7227 167.1895 l
171.0396 157.5078 l
180.7227 147.8242 l
180.7227 147.8242 l
f
200.0889 167.1895 m
209.7729 176.873 l
200.0898 186.5566 l
190.4063 176.873 l
200.0889 167.1895 l
200.0889 167.1895 l
f
219.4585 186.5586 m
229.1411 196.2422 l
219.4585 205.9258 l
209.7749 196.2422 l
219.4585 186.5586 l
219.4585 186.5586 l
f
238.8257 205.9277 m
248.5088 215.6094 l
238.8257 225.293 l
229.1431 215.6094 l
238.8257 205.9277 l
238.8257 205.9277 l
f
258.1929 225.2949 m
267.8774 234.9785 l
258.1948 244.6621 l
248.5093 234.9766 l
258.1929 225.2949 l
258.1929 225.2949 l
f
277.5615 244.6621 m
287.2422 254.3438 l
277.5605 264.0273 l
267.8789 254.3457 l
277.5615 244.6621 l
277.5615 244.6621 l
f
296.9287 264.0293 m
306.6113 273.7129 l
296.9287 283.3965 l
287.2461 273.7129 l
296.9287 264.0293 l
296.9287 264.0293 l
f
316.2969 283.3984 m
325.9785 293.0801 l
316.2969 302.7637 l
306.6133 293.0801 l
316.2969 283.3984 l
316.2969 283.3984 l
f
335.666 302.7676 m
345.3457 312.4473 l
335.6641 322.1309 l
325.9824 312.4492 l
335.666 302.7676 l
335.666 302.7676 l
f
355.0293 322.1328 m
364.7148 331.8164 l
355.0313 341.5 l
345.3477 331.8145 l
355.0293 322.1328 l
355.0293 322.1328 l
f
374.3984 341.5 m
384.082 351.1836 l
374.3984 360.8652 l
364.7168 351.1836 l
374.3984 341.5 l
374.3984 341.5 l
f
393.7656 360.8691 m
403.4512 370.5508 l
393.7676 380.2344 l
384.084 370.5508 l
393.7656 360.8691 l
393.7656 360.8691 l
f
413.1367 380.2363 m
422.8184 389.9199 l
413.1367 399.6035 l
403.4531 389.9199 l
413.1367 380.2363 l
413.1367 380.2363 l
f
432.502 399.6035 m
442.1855 409.2871 l
432.502 418.9688 l
422.8184 409.2871 l
432.502 399.6035 l
432.502 399.6035 l
f
451.8711 418.9707 m
461.5527 428.6553 l
451.8711 438.3384 l
442.1875 428.6538 l
451.8711 418.9707 l
451.8711 418.9707 l
f
471.2363 438.3384 m
480.9219 448.0229 l
471.2383 457.7061 l
461.5547 448.0225 l
471.2363 438.3384 l
471.2363 438.3384 l
f
122.6191 128.4551 m
132.3027 138.1387 l
122.6206 147.8223 l
112.936 138.1387 l
122.6191 128.4551 l
122.6191 128.4551 l
f
141.9863 147.8223 m
151.6704 157.5078 l
141.9873 167.1895 l
132.3037 157.5059 l
141.9863 147.8223 l
141.9863 147.8223 l
f
161.3555 167.1914 m
171.0386 176.875 l
161.3555 186.5566 l
151.6724 176.875 l
161.3555 167.1914 l
161.3555 167.1914 l
f
180.7217 186.5586 m
190.4053 196.2422 l
180.7217 205.9258 l
171.0386 196.2402 l
180.7217 186.5586 l
180.7217 186.5586 l
f
200.0898 205.9258 m
209.7739 215.6094 l
200.0913 225.293 l
190.4072 215.6094 l
200.0898 205.9258 l
200.0898 205.9258 l
f
219.4585 225.2949 m
229.1411 234.9766 l
219.4585 244.6602 l
209.7754 234.9766 l
219.4585 225.2949 l
219.4585 225.2949 l
f
238.8257 244.6621 m
248.5093 254.3457 l
238.8271 264.0293 l
229.1431 254.3438 l
238.8257 244.6621 l
238.8257 244.6621 l
f
258.1943 264.0313 m
267.8755 273.7129 l
258.1919 283.3945 l
248.5112 273.7129 l
258.1943 264.0313 l
258.1943 264.0313 l
f
277.5615 283.3984 m
287.2446 293.0801 l
277.5615 302.7637 l
267.8784 293.0801 l
277.5615 283.3984 l
277.5615 283.3984 l
f
296.9287 302.7637 m
306.6113 312.4473 l
296.9287 322.1309 l
287.2461 312.4473 l
296.9287 302.7637 l
296.9287 302.7637 l
f
316.2969 322.1328 m
325.9785 331.8145 l
316.2969 341.498 l
306.6152 331.8184 l
316.2969 322.1328 l
316.2969 322.1328 l
f
335.6621 341.5 m
345.3477 351.1836 l
335.6641 360.8652 l
325.9805 351.1816 l
335.6621 341.5 l
335.6621 341.5 l
f
355.0313 360.8691 m
364.7148 370.5508 l
355.0313 380.2344 l
345.3496 370.5508 l
355.0313 360.8691 l
355.0313 360.8691 l
f
374.3984 380.2363 m
384.082 389.9199 l
374.3984 399.6016 l
364.7168 389.918 l
374.3984 380.2363 l
374.3984 380.2363 l
f
393.7676 399.6035 m
403.4512 409.2871 l
393.7695 418.9707 l
384.084 409.2871 l
393.7676 399.6035 l
393.7676 399.6035 l
f
413.1348 418.9707 m
422.8184 428.6538 l
413.1348 438.3369 l
403.4531 428.6538 l
413.1348 418.9707 l
413.1348 418.9707 l
f
432.502 438.3384 m
442.1875 448.0229 l
432.5039 457.7056 l
422.8184 448.0225 l
432.502 438.3384 l
432.502 438.3384 l
f
83.8828 128.457 m
93.5664 138.1406 l
83.8857 147.8203 l
74.2012 138.1387 l
83.8828 128.457 l
83.8828 128.457 l
f
103.2495 147.8242 m
112.9331 157.5078 l
103.2529 167.1895 l
93.5688 157.5039 l
103.2495 147.8242 l
103.2495 147.8242 l
f
122.6172 167.1914 m
132.3018 176.875 l
122.6206 186.5566 l
112.937 176.873 l
122.6172 167.1914 l
122.6172 167.1914 l
f
141.9863 186.5605 m
151.6694 196.2441 l
141.9878 205.9258 l
132.3052 196.2422 l
141.9863 186.5605 l
141.9863 186.5605 l
f
161.3525 205.9277 m
171.0361 215.6094 l
161.3555 225.291 l
151.6719 215.6074 l
161.3525 205.9277 l
161.3525 205.9277 l
f
180.7217 225.2949 m
190.4048 234.9785 l
180.7241 244.6602 l
171.0396 234.9766 l
180.7217 225.2949 l
180.7217 225.2949 l
f
200.0889 244.6621 m
209.7729 254.3457 l
200.0913 264.0273 l
190.4077 254.3438 l
200.0889 244.6621 l
200.0889 244.6621 l
f
219.457 264.0313 m
229.1411 273.7148 l
219.4609 283.3965 l
209.7764 273.7129 l
219.457 264.0313 l
219.457 264.0313 l
f
238.8247 283.3984 m
248.5063 293.0801 l
238.8247 302.7617 l
229.145 293.0801 l
238.8247 283.3984 l
238.8247 283.3984 l
f
258.1919 302.7676 m
267.8755 312.4492 l
258.1943 322.1309 l
248.5112 312.4473 l
258.1919 302.7676 l
258.1919 302.7676 l
f
277.5605 322.1328 m
287.2422 331.8184 l
277.5615 341.498 l
267.8789 331.8145 l
277.5605 322.1328 l
277.5605 322.1328 l
f
296.9287 341.502 m
306.6094 351.1855 l
296.9287 360.8652 l
287.248 351.1855 l
296.9287 341.502 l
296.9287 341.502 l
f
316.2949 360.8691 m
325.9785 370.5527 l
316.2969 380.2324 l
306.6133 370.5488 l
316.2949 360.8691 l
316.2949 360.8691 l
f
335.6641 380.2363 m
345.3457 389.9199 l
335.6641 399.6016 l
325.9824 389.918 l
335.6641 380.2363 l
335.6641 380.2363 l
f
355.0293 399.6055 m
364.7148 409.2871 l
355.0332 418.9688 l
345.3496 409.2852 l
355.0293 399.6055 l
355.0293 399.6055 l
f
374.3984 418.9727 m
384.082 428.6567 l
374.4023 438.3374 l
364.7188 428.6538 l
374.3984 418.9727 l
374.3984 418.9727 l
f
393.7656 438.3398 m
403.4492 448.0229 l
393.7676 457.7041 l
384.084 448.021 l
393.7656 438.3398 l
393.7656 438.3398 l
f
64.5186 147.8223 m
74.2012 157.5059 l
64.5166 167.1895 l
54.8335 157.5078 l
64.5186 147.8223 l
64.5186 147.8223 l
f
83.8843 167.1895 m
93.5688 176.873 l
83.8838 186.5566 l
74.1997 176.873 l
83.8843 167.1895 l
83.8843 167.1895 l
f
103.2524 186.5566 m
112.9375 196.2402 l
103.2524 205.9258 l
93.5684 196.2402 l
103.2524 186.5566 l
103.2524 186.5566 l
f
122.6216 205.9258 m
132.3037 215.6074 l
122.6196 225.293 l
112.9375 215.6094 l
122.6216 205.9258 l
122.6216 205.9258 l
f
141.9873 225.293 m
151.6719 234.9766 l
141.9873 244.6602 l
132.3032 234.9766 l
141.9873 225.293 l
141.9873 225.293 l
f
161.3564 244.6602 m
171.0396 254.3438 l
161.3555 264.0273 l
151.6719 254.3438 l
161.3564 244.6602 l
161.3564 244.6602 l
f
180.7241 264.0273 m
190.4067 273.7109 l
180.7217 283.3965 l
171.0396 273.7129 l
180.7241 264.0273 l
180.7241 264.0273 l
f
200.0918 283.3965 m
209.7764 293.0801 l
200.0918 302.7637 l
190.4067 293.0801 l
200.0918 283.3965 l
200.0918 283.3965 l
f
219.4609 302.7637 m
229.1411 312.4453 l
219.457 322.1309 l
209.7764 312.4492 l
219.4609 302.7637 l
219.4609 302.7637 l
f
238.8271 322.1328 m
248.5093 331.8145 l
238.8257 341.5 l
229.1431 331.8164 l
238.8271 322.1328 l
238.8271 322.1328 l
f
258.1948 341.5 m
267.8774 351.1816 l
258.1929 360.8652 l
248.5093 351.1836 l
258.1948 341.5 l
258.1948 341.5 l
f
277.5635 360.8691 m
287.2446 370.5488 l
277.5605 380.2324 l
267.8789 370.5527 l
277.5635 360.8691 l
277.5635 360.8691 l
f
296.9287 380.2324 m
306.6133 389.918 l
296.9287 399.6016 l
287.2446 389.918 l
296.9287 380.2324 l
296.9287 380.2324 l
f
316.2988 399.6016 m
325.9805 409.2852 l
316.2969 418.9688 l
306.6133 409.2871 l
316.2988 399.6016 l
316.2988 399.6016 l
f
335.666 418.9688 m
345.3496 428.6528 l
335.6641 438.3374 l
325.9805 428.6538 l
335.666 418.9688 l
335.666 418.9688 l
f
355.0332 438.3374 m
364.7168 448.0225 l
355.0332 457.7061 l
345.3496 448.0225 l
355.0332 438.3374 l
355.0332 438.3374 l
f
64.5146 186.5586 m
74.1992 196.2422 l
64.5166 205.9258 l
54.832 196.2402 l
64.5146 186.5586 l
64.5146 186.5586 l
f
83.8828 205.9258 m
93.5684 215.6094 l
83.8843 225.293 l
74.2002 215.6074 l
83.8828 205.9258 l
83.8828 205.9258 l
f
103.2524 225.2949 m
112.9351 234.9785 l
103.2524 244.6602 l
93.5688 234.9785 l
103.2524 225.2949 l
103.2524 225.2949 l
f
122.6191 244.6621 m
132.3027 254.3438 l
122.6191 264.0273 l
112.936 254.3438 l
122.6191 244.6621 l
122.6191 244.6621 l
f
141.9873 264.0293 m
151.6704 273.7129 l
141.9873 283.3965 l
132.3037 273.7129 l
141.9873 264.0293 l
141.9873 264.0293 l
f
161.3555 283.3984 m
171.0376 293.0801 l
161.3555 302.7637 l
151.6719 293.0801 l
161.3555 283.3984 l
161.3555 283.3984 l
f
180.7217 302.7637 m
190.4067 312.4492 l
180.7241 322.1328 l
171.0396 312.4473 l
180.7217 302.7637 l
180.7217 302.7637 l
f
200.0913 322.1328 m
209.7729 331.8145 l
200.0889 341.498 l
190.4077 331.8164 l
200.0913 322.1328 l
200.0913 322.1328 l
f
219.4585 341.5 m
229.1411 351.1836 l
219.4585 360.8652 l
209.7754 351.1836 l
219.4585 341.5 l
219.4585 341.5 l
f
238.8257 360.8691 m
248.5088 370.5508 l
238.8257 380.2344 l
229.1431 370.5508 l
238.8257 360.8691 l
238.8257 360.8691 l
f
258.1943 380.2363 m
267.8755 389.918 l
258.1929 399.6016 l
248.5112 389.9199 l
258.1943 380.2363 l
258.1943 380.2363 l
f
277.5596 399.6016 m
287.2446 409.2871 l
277.5615 418.9688 l
267.8765 409.2852 l
277.5596 399.6016 l
277.5596 399.6016 l
f
296.9287 418.9727 m
306.6113 428.6538 l
296.9287 438.3374 l
287.2461 428.6538 l
296.9287 418.9727 l
296.9287 418.9727 l
f
316.2969 438.3384 m
325.9805 448.0225 l
316.2969 457.7056 l
306.6133 448.0225 l
316.2969 438.3384 l
316.2969 438.3384 l
f
64.5161 225.293 m
74.2002 234.9766 l
64.5166 244.6602 l
54.832 234.9766 l
64.5161 225.293 l
64.5161 225.293 l
f
83.8853 244.6621 m
93.5684 254.3438 l
83.8838 264.0273 l
74.2012 254.3457 l
83.8853 244.6621 l
83.8853 244.6621 l
f
103.2515 264.0273 m
112.9351 273.7129 l
103.2515 283.3945 l
93.5684 273.7129 l
103.2515 264.0273 l
103.2515 264.0273 l
f
122.6206 283.3965 m
132.3037 293.0801 l
122.6206 302.7637 l
112.937 293.0801 l
122.6206 283.3965 l
122.6206 283.3965 l
f
141.9873 302.7637 m
151.6704 312.4473 l
141.9873 322.1328 l
132.3037 312.4492 l
141.9873 302.7637 l
141.9873 302.7637 l
f
161.3555 322.1328 m
171.0396 331.8184 l
161.3564 341.5 l
151.6719 331.8164 l
161.3555 322.1328 l
161.3555 322.1328 l
f
180.7241 341.5 m
190.4048 351.1816 l
180.7217 360.8652 l
171.0396 351.1855 l
180.7241 341.5 l
180.7241 341.5 l
f
200.0913 360.8691 m
209.7739 370.5508 l
200.0898 380.2344 l
190.4072 370.5508 l
200.0913 360.8691 l
200.0913 360.8691 l
f
219.4585 380.2363 m
229.1411 389.918 l
219.4585 399.6016 l
209.7749 389.9199 l
219.4585 380.2363 l
219.4585 380.2363 l
f
238.8271 399.6055 m
248.5088 409.2852 l
238.8247 418.9688 l
229.1436 409.2871 l
238.8271 399.6055 l
238.8271 399.6055 l
f
258.1919 418.9688 m
267.8765 428.6538 l
258.1929 438.3374 l
248.5088 428.6528 l
258.1919 418.9688 l
258.1919 418.9688 l
f
277.5615 438.3384 m
287.2446 448.0225 l
277.561 457.7056 l
267.8774 448.0225 l
277.5615 438.3384 l
277.5615 438.3384 l
f
64.5161 264.0313 m
74.1992 273.7129 l
64.5161 283.3965 l
54.832 273.7148 l
64.5161 264.0313 l
64.5161 264.0313 l
f
83.8828 283.3965 m
93.5664 293.0801 l
83.8828 302.7637 l
74.1992 293.0801 l
83.8828 283.3965 l
83.8828 283.3965 l
f
103.2515 302.7656 m
112.9351 312.4492 l
103.2515 322.1328 l
93.5684 312.4492 l
103.2515 302.7656 l
103.2515 302.7656 l
f
122.6191 322.1328 m
132.3027 331.8164 l
122.6191 341.5 l
112.936 331.8184 l
122.6191 322.1328 l
122.6191 322.1328 l
f
141.9873 341.5 m
151.6719 351.1855 l
141.9873 360.8691 l
132.3032 351.1855 l
141.9873 341.5 l
141.9873 341.5 l
f
161.3555 360.8691 m
171.0361 370.5508 l
161.3525 380.2344 l
151.6719 370.5527 l
161.3555 360.8691 l
161.3555 360.8691 l
f
180.7217 380.2363 m
190.4053 389.9199 l
180.7217 399.6035 l
171.0386 389.9199 l
180.7217 380.2363 l
180.7217 380.2363 l
f
200.0898 399.6035 m
209.7729 409.2871 l
200.0889 418.9707 l
190.4063 409.2871 l
200.0898 399.6035 l
200.0898 399.6035 l
f
219.4585 418.9727 m
229.1392 428.6538 l
219.4561 438.3374 l
209.7754 428.6567 l
219.4585 418.9727 l
219.4585 418.9727 l
f
238.8237 438.3374 m
248.5088 448.0225 l
238.8247 457.7061 l
229.1406 448.0225 l
238.8237 438.3374 l
238.8237 438.3374 l
f
64.5161 302.7637 m
74.1992 312.4473 l
64.5161 322.1309 l
54.832 312.4453 l
64.5161 302.7637 l
64.5161 302.7637 l
f
83.8838 322.1328 m
93.5684 331.8164 l
83.8853 341.5 l
74.2012 331.8145 l
83.8838 322.1328 l
83.8838 322.1328 l
f
103.2524 341.5 m
112.9351 351.1836 l
103.2524 360.8652 l
93.5688 351.1836 l
103.2524 341.5 l
103.2524 341.5 l
f
122.6196 360.8691 m
132.3037 370.5527 l
122.6216 380.2363 l
112.9375 370.5508 l
122.6196 360.8691 l
122.6196 360.8691 l
f
141.9878 380.2363 m
151.6694 389.918 l
141.9863 399.5996 l
132.3052 389.9199 l
141.9878 380.2363 l
141.9878 380.2363 l
f
161.3555 399.6035 m
171.0386 409.2871 l
161.3555 418.9688 l
151.6724 409.2871 l
161.3555 399.6035 l
161.3555 399.6035 l
f
180.7227 418.9707 m
190.4053 428.6538 l
180.7227 438.3369 l
171.0396 428.6538 l
180.7227 418.9707 l
180.7227 418.9707 l
f
200.0918 438.3398 m
209.7729 448.021 l
200.0898 457.7041 l
190.4092 448.0229 l
200.0918 438.3398 l
200.0918 438.3398 l
f
64.5166 341.5 m
74.2002 351.1836 l
64.5161 360.8691 l
54.832 351.1855 l
64.5166 341.5 l
64.5166 341.5 l
f
83.8843 360.8691 m
93.5684 370.5508 l
83.8828 380.2344 l
74.2002 370.5527 l
83.8843 360.8691 l
83.8843 360.8691 l
f
103.2524 380.2363 m
112.9375 389.9199 l
103.2524 399.6055 l
93.5684 389.9199 l
103.2524 380.2363 l
103.2524 380.2363 l
f
122.6206 399.6035 m
132.3018 409.2852 l
122.6172 418.9688 l
112.937 409.2891 l
122.6206 399.6035 l
122.6206 399.6035 l
f
141.9873 418.9707 m
151.6704 428.6538 l
141.9863 438.3384 l
132.3037 428.6553 l
141.9873 418.9707 l
141.9873 418.9707 l
f
161.3555 438.3384 m
171.0386 448.0225 l
161.3535 457.7056 l
151.6704 448.0229 l
161.3555 438.3384 l
161.3555 438.3384 l
f
64.5166 380.2363 m
74.1992 389.918 l
64.5146 399.6035 l
54.832 389.9199 l
64.5166 380.2363 l
64.5166 380.2363 l
f
83.8838 399.6035 m
93.5688 409.2871 l
83.8843 418.9727 l
74.1997 409.2871 l
83.8838 399.6035 l
83.8838 399.6035 l
f
103.2529 418.9727 m
112.9331 428.6528 l
103.2495 438.3374 l
93.5688 428.6567 l
103.2529 418.9727 l
103.2529 418.9727 l
f
122.6206 438.3384 m
132.3027 448.0225 l
122.6191 457.7061 l
112.936 448.0229 l
122.6206 438.3384 l
122.6206 438.3384 l
f
64.5166 418.9707 m
74.2012 428.6553 l
64.5186 438.3384 l
54.8335 428.6538 l
64.5166 418.9707 l
64.5166 418.9707 l
f
83.8857 438.3398 m
93.5664 448.021 l
83.8828 457.7036 l
74.2012 448.0225 l
83.8857 438.3398 l
83.8857 438.3398 l
f
0 D
37.9165 661.4585 m
555.9414 661.4585 l
572.7813 661.4585 586.5586 647.6768 586.5586 630.8423 c
586.5586 112.8164 l
586.5586 95.9824 572.7754 82.2012 555.9414 82.2012 c
37.9165 82.2012 l
21.0815 82.2012 7.30029 95.9785 7.30029 112.8164 c
7.30029 630.8423 l
7.30029 647.6812 21.0771 661.4585 37.9165 661.4585 c
37.9165 661.4585 l
f
*U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
